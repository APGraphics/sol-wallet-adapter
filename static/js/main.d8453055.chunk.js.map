{"version":3,"sources":["App.js","index.js"],"names":["App","useState","logs","setLogs","addLog","log","network","clusterApiUrl","providerUrl","setProviderUrl","connection","useMemo","Connection","wallet","Wallet","setConnected","a","transaction","SystemProgram","transfer","fromPubkey","publicKey","toPubkey","lamports","getRecentBlockhash","recentBlockhash","blockhash","signTransaction","signed","sendRawTransaction","serialize","signature","confirmTransaction","console","warn","message","useEffect","on","toBase58","disconnect","className","type","value","onChange","e","target","trim","connected","onClick","connect","map","i","key","ReactDOM","render","document","getElementById"],"mappings":"oVAwFeA,MAnFf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,KAEb,SAASC,EAAOC,GACdF,GAAQ,SAACD,GAAD,4BAAcA,GAAd,CAAoBG,OAG9B,IAAMC,EAAUC,YAAc,UANjB,EAOyBN,mBAAS,yBAPlC,mBAONO,EAPM,KAOOC,EAPP,KASPC,EAAaC,mBAAQ,kBAAM,IAAIC,IAAWN,KAAU,CAACA,IACrDO,EAASF,mBAAQ,kBAAM,IAAIG,IAAON,EAAaF,KAAU,CAC7DE,EACAF,IAZW,EAcYL,oBAAS,GAAzBc,EAdI,gEA6Bb,gCAAAC,EAAA,sEAEQC,EAAcC,IAAcC,SAAS,CACvCC,WAAYP,EAAOQ,UACnBC,SAAUT,EAAOQ,UACjBE,SAAU,MAEZnB,EAAO,4BAPX,SASYM,EAAWc,qBATvB,cAQIP,EAAYQ,gBARhB,OAUMC,UACFtB,EAAO,uCAXX,SAYuBS,EAAOc,gBAAgBV,GAZ9C,cAYQW,EAZR,OAaIxB,EAAO,yCAbX,UAc0BM,EAAWmB,mBAAmBD,EAAOE,aAd/D,eAeI1B,EAAO,0BADH2B,EAdR,QAekD,2BAflD,UAgBUrB,EAAWsB,mBAAmBD,EAAW,GAhBnD,QAiBI3B,EAAO,eAAiB2B,EAAY,cAjBxC,kDAmBIE,QAAQC,KAAR,MACA9B,EAAO,UAAY,KAAE+B,SApBzB,2DA7Ba,sBAqDb,OAtCAC,qBAAU,WASR,OARAvB,EAAOwB,GAAG,WAAW,WACnBtB,GAAa,GACbX,EAAO,uBAAyBS,EAAOQ,UAAUiB,eAEnDzB,EAAOwB,GAAG,cAAc,WACtBtB,GAAa,GACbX,EAAO,+BAEF,WACLS,EAAO0B,gBAER,CAAC1B,IA2BF,yBAAK2B,UAAU,OACb,mDACA,yCAAelC,GACf,gDACmB,IACjB,2BACEmC,KAAK,OACLC,MAAOlC,EACPmC,SAAU,SAACC,GAAD,OAAOnC,EAAemC,EAAEC,OAAOH,MAAMI,YAGlDjC,EAAOkC,UACN,oCACE,gDAAsBlC,EAAOQ,UAAUiB,WAAvC,KACA,4BAAQU,QApEH,4CAoEL,qBAGF,4BAAQA,QAAS,kBAAMnC,EAAOoC,YAA9B,qBAEF,6BACA,yBAAKT,UAAU,QACZtC,EAAKgD,KAAI,SAAC7C,EAAK8C,GAAN,OACR,yBAAKC,IAAKD,GAAI9C,SC3ExBgD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.d8453055.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport './App.css';\nimport Wallet from '@project-serum/sol-wallet-adapter';\nimport { Connection, SystemProgram, clusterApiUrl } from '@solana/web3.js';\n\nfunction App() {\n  const [logs, setLogs] = useState([]);\n  function addLog(log) {\n    setLogs((logs) => [...logs, log]);\n  }\n\n  const network = clusterApiUrl('devnet');\n  const [providerUrl, setProviderUrl] = useState('https://www.sollet.io');\n\n  const connection = useMemo(() => new Connection(network), [network]);\n  const wallet = useMemo(() => new Wallet(providerUrl, network), [\n    providerUrl,\n    network,\n  ]);\n  const [, setConnected] = useState(false);\n  useEffect(() => {\n    wallet.on('connect', () => {\n      setConnected(true);\n      addLog('Connected to wallet ' + wallet.publicKey.toBase58());\n    });\n    wallet.on('disconnect', () => {\n      setConnected(false);\n      addLog('Disconnected from wallet');\n    });\n    return () => {\n      wallet.disconnect();\n    };\n  }, [wallet]);\n\n  async function sendTransaction() {\n    try {\n      let transaction = SystemProgram.transfer({\n        fromPubkey: wallet.publicKey,\n        toPubkey: wallet.publicKey,\n        lamports: 100,\n      });\n      addLog('Getting recent blockhash');\n      transaction.recentBlockhash = (\n        await connection.getRecentBlockhash()\n      ).blockhash;\n      addLog('Sending signature request to wallet');\n      let signed = await wallet.signTransaction(transaction);\n      addLog('Got signature, submitting transaction');\n      let signature = await connection.sendRawTransaction(signed.serialize());\n      addLog('Submitted transaction ' + signature + ', awaiting confirmation');\n      await connection.confirmTransaction(signature, 1);\n      addLog('Transaction ' + signature + ' confirmed');\n    } catch (e) {\n      console.warn(e);\n      addLog('Error: ' + e.message);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Wallet Adapter Demo</h1>\n      <div>Network: {network}</div>\n      <div>\n        Waller provider:{' '}\n        <input\n          type=\"text\"\n          value={providerUrl}\n          onChange={(e) => setProviderUrl(e.target.value.trim())}\n        />\n      </div>\n      {wallet.connected ? (\n        <>\n          <div>Wallet address: {wallet.publicKey.toBase58()}.</div>\n          <button onClick={sendTransaction}>Send Transaction</button>\n        </>\n      ) : (\n        <button onClick={() => wallet.connect()}>Connect to Wallet</button>\n      )}\n      <hr />\n      <div className=\"logs\">\n        {logs.map((log, i) => (\n          <div key={i}>{log}</div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}